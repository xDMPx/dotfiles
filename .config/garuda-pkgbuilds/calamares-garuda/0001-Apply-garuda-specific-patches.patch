From 392eebcf517c890dd6be881f8ba781af044cfe8b Mon Sep 17 00:00:00 2001
From: TNE <tne@garudalinux.org>
Date: Sun, 12 Feb 2023 05:40:58 +0100
Subject: [PATCH] dw

---
 src/modules/chrootcfg/chrootcfg.conf          |  14 +
 src/modules/chrootcfg/main.py                 | 295 ++++++++++++++++++
 src/modules/chrootcfg/module.desc             |   6 +
 src/modules/grubcfg/main.py                   |   2 +-
 src/modules/initcpiocfg/main.py               |  11 +
 src/modules/mhwdcfg/main.py                   | 113 +++++++
 src/modules/mhwdcfg/mhwdcfg.conf              |  19 ++
 src/modules/mhwdcfg/module.desc               |   6 +
 src/modules/mount/mount.conf                  |  64 +---
 .../partition/gui/PartitionLabelsView.cpp     |   2 +-
 src/modules/partition/partition.conf          |   8 +-
 src/modules/postcfg/main.py                   | 149 +++++++++
 src/modules/postcfg/module.desc               |   6 +
 src/modules/postcfg/postcfg.conf              |   4 +
 14 files changed, 637 insertions(+), 62 deletions(-)
 create mode 100644 src/modules/chrootcfg/chrootcfg.conf
 create mode 100644 src/modules/chrootcfg/main.py
 create mode 100644 src/modules/chrootcfg/module.desc
 create mode 100644 src/modules/mhwdcfg/main.py
 create mode 100644 src/modules/mhwdcfg/mhwdcfg.conf
 create mode 100644 src/modules/mhwdcfg/module.desc
 create mode 100644 src/modules/postcfg/main.py
 create mode 100644 src/modules/postcfg/module.desc
 create mode 100644 src/modules/postcfg/postcfg.conf

diff --git a/src/modules/chrootcfg/chrootcfg.conf b/src/modules/chrootcfg/chrootcfg.conf
new file mode 100644
index 000000000..fa1be2af8
--- /dev/null
+++ b/src/modules/chrootcfg/chrootcfg.conf
@@ -0,0 +1,14 @@
+---
+requirements:
+    - name: /etc
+      mode: "0o755"
+    - name: /var/cache/pacman/pkg
+      mode: "0o755"
+    - name: /var/lib/pacman
+      mode: "0o755"
+
+isRank: true
+
+keyrings:
+    - archlinux
+    - chaotic
diff --git a/src/modules/chrootcfg/main.py b/src/modules/chrootcfg/main.py
new file mode 100644
index 000000000..fd34a1bf7
--- /dev/null
+++ b/src/modules/chrootcfg/main.py
@@ -0,0 +1,295 @@
+#!/usr/bin/env python3
+# -*- coding: utf-8 -*-
+#
+# === This file is part of Calamares - <http://github.com/calamares> ===
+#
+#   Copyright 2016, Artoo <artoo@manjaro.org>
+#   Copyright 2017, Philip MÃ¼ller <philm@manjaro.org>
+#
+#   Calamares is free software: you can redistribute it and/or modify
+#   it under the terms of the GNU General Public License as published by
+#   the Free Software Foundation, either version 3 of the License, or
+#   (at your option) any later version.
+#
+#   Calamares is distributed in the hope that it will be useful,
+#   but WITHOUT ANY WARRANTY; without even the implied warranty of
+#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+#   GNU General Public License for more details.
+#
+#   You should have received a copy of the GNU General Public License
+#   along with Calamares. If not, see <http://www.gnu.org/licenses/>.
+
+import os
+import shutil
+import subprocess
+import sys
+import re
+import libcalamares
+
+from libcalamares.utils import check_target_env_call, target_env_call, debug
+from os.path import join
+from subprocess import call
+
+
+class OperationTracker:
+    def __init__(self):
+        self._downloaded = 0
+        self._installed = 0
+        self._total = 0
+        self._progress = float(0)
+
+    @property
+    def downloaded(self):
+        return self._downloaded
+
+    @downloaded.setter
+    def downloaded(self, value):
+        self._downloaded = value
+
+    @property
+    def installed(self):
+        return self._installed
+
+    @installed.setter
+    def installed(self, value):
+        self._installed = value
+
+    @property
+    def total(self):
+        return self._total
+
+    @total.setter
+    def total(self, value):
+        self._total = value
+
+    @property
+    def progress(self):
+        return self._progress
+
+    @progress.setter
+    def progress(self, value):
+        self._progress = value
+
+    def send_progress(self, counter, phase):
+        for p in range(phase):
+            if self.total == 0:
+                continue
+            step = 0.05
+            step += 0.95 * (counter / float(self.total))
+            self.progress += step / self.total
+
+            debug("Progress: {}".format(self.progress))
+
+        libcalamares.job.setprogress(self.progress)
+
+
+ON_POSIX = 'posix' in sys.builtin_module_names
+
+
+class PacmanController:
+    def __init__(self, root):
+        self.__root = root
+        self.__operations = libcalamares.globalstorage.value(
+            "packageOperations"
+            )
+        self.__tracker = OperationTracker()
+        self.__keyrings = libcalamares.job.configuration.get(
+            'keyrings',
+            []
+            )
+
+    @property
+    def tracker(self):
+        return self.__tracker
+
+    @property
+    def root(self):
+        return self.__root
+
+    @property
+    def operations(self):
+        return self.__operations
+
+    @property
+    def keyrings(self):
+        return self.__keyrings
+
+    def init_keyring(self):
+        target_env_call(["pacman-key", "--init"])
+
+    def populate_keyring(self):
+        target_env_call(["pacman-key", "--populate"])
+
+    def parse_output(self, cmd):
+        cal_env = os.environ
+        cal_env["LC_ALL"] = "C"
+        last = []
+        phase = 0
+
+        process = subprocess.Popen(
+            cmd,
+            env=cal_env,
+            bufsize=1,
+            stdout=subprocess.PIPE,
+            close_fds=ON_POSIX
+            )
+
+        for line in iter(process.stdout.readline, b''):
+            pkgs = re.findall(r'\((\d+)\)', line.decode())
+            dl = re.findall(r'downloading\s+(.*).pkg.tar.xz', line.decode())
+            inst = re.findall(r'installing(.*)\.\.\.', line.decode())
+
+            if pkgs:
+                self.tracker.total = (int(pkgs[0]))
+                debug("Number of packages: {}".format(self.tracker.total))
+
+            if dl:
+                if dl != last:
+                    self.tracker.downloaded += 1
+                    phase = 1
+                    debug("Downloading: {}".format(dl[0]))
+                    debug("Downloaded packages: {}".format(
+                        self.tracker.downloaded
+                        ))
+                    self.tracker.send_progress(
+                        self.tracker.downloaded,
+                        phase
+                        )
+
+                last = dl
+            elif inst:
+                self.tracker.installed += 1
+                phase = 2
+                debug("Installing: {}".format(inst[0]))
+                debug("Installed packages: {}".format(self.tracker.installed))
+                self.tracker.send_progress(self.tracker.installed, phase)
+
+        if process.returncode != 0:
+            return process.kill()
+
+        return None
+
+    def install(self, pkglist, local=False):
+        cachedir = join(self.root, "var/cache/pacman/pkg")
+        dbdir = join(self.root, "var/lib/pacman")
+        args = ["pacman", "--noconfirm"]
+        if local:
+            args.extend(["-U"])
+        else:
+            args.extend(["-Sy"])
+
+        args.extend([
+            "--cachedir",
+            cachedir,
+            "--root",
+            self.root,
+            "--dbpath",
+            dbdir
+            ])
+        cmd = args + pkglist
+        self.parse_output(cmd)
+
+    def remove(self, pkglist):
+        args = ["chroot", self.root, "pacman", "-Rs", "--noconfirm"]
+        cmd = args + pkglist
+        check_target_env_call(cmd)
+
+    def run(self):
+        pkgs = []
+        for key in self.operations.keys():
+            if key == "install":
+                for pkg in self.operations[key]:
+                    pkgs.extend([pkg["package"]])
+                self.install(pkgs)
+            elif key == "localInstall":
+                for pkg in self.operations[key]:
+                    pkgs.extend([pkg["package"]])
+                self.install(pkgs, local=True)
+            elif key == "remove":
+                for pkg in self.operations[key]:
+                    pkgs.extend([pkg["package"]])
+                self.tracker.total(len(pkgs))
+                self.remove(pkgs)
+            elif key == "try_install":
+                for pkg in self.operations[key]:
+                    pkgs.extend([pkg["package"]])
+                self.install(pkgs)
+            elif key == "try_remove":
+                for pkg in self.operations[key]:
+                    pkgs.extend([pkg["package"]])
+                self.remove(pkgs)
+
+        self.init_keyring()
+        self.populate_keyring()
+
+        return None
+
+
+class ChrootController:
+    def __init__(self):
+        self.__root = libcalamares.globalstorage.value('rootMountPoint')
+        self.__requirements = libcalamares.job.configuration.get(
+            'requirements',
+            []
+            )
+        self.__isRank = libcalamares.job.configuration['isRank']
+
+    @property
+    def root(self):
+        return self.__root
+
+    @property
+    def isRank(self):
+        return self.__isRank
+
+    @property
+    def requirements(self):
+        return self.__requirements
+
+    def make_dirs(self):
+        for target in self.requirements:
+            dest = self.root + target["name"]
+            if not os.path.exists(dest):
+                debug("Create: {}".format(dest))
+                mod = int(target["mode"], 8)
+                debug("Mode: {}".format(oct(mod)))
+                os.makedirs(dest, mode=mod)
+
+    def rank_mirrors(self):
+        call(["reflector", "--sort", "age", "--save", "/etc/pacman.d/mirrorlist"])
+
+    def copy_file(self, file):
+        if os.path.exists(os.path.join("/", file)):
+            shutil.copy2(
+                os.path.join("/", file),
+                os.path.join(self.root, file)
+                )
+
+    def prepare(self):
+        cal_umask = os.umask(0)
+        self.make_dirs()
+        path = join(self.root, "run")
+        os.chmod(path, 0o755)
+        os.umask(cal_umask)
+        self.copy_file('etc/pacman.d/mirrorlist')
+        self.copy_file('etc/resolv.conf')
+
+    def run(self):
+        if self.isRank:
+            self.rank_mirrors()
+
+        self.prepare()
+        pacman = PacmanController(self.root)
+
+        return pacman.run()
+
+
+def run():
+    """
+    Create chroot dirs and install pacman,
+    kernel and netinstall selection
+    """
+
+    targetRoot = ChrootController()
+
+    return targetRoot.run()
diff --git a/src/modules/chrootcfg/module.desc b/src/modules/chrootcfg/module.desc
new file mode 100644
index 000000000..6020a9583
--- /dev/null
+++ b/src/modules/chrootcfg/module.desc
@@ -0,0 +1,6 @@
+# Syntax is YAML 1.2
+---
+type:       "job"
+name:       "chrootcfg"
+interface:  "python"
+script:     "main.py"   #assumed relative to the current directory
diff --git a/src/modules/grubcfg/main.py b/src/modules/grubcfg/main.py
index 47944640d..c4da0d7f8 100644
--- a/src/modules/grubcfg/main.py
+++ b/src/modules/grubcfg/main.py
@@ -171,7 +171,7 @@ def modify_grub_default(partitions, root_mount_point, distributor):
             break
 
     if have_plymouth:
-        use_splash = "splash"
+        use_splash = "quiet splash rd.udev.log_priority=3 vt.global_cursor_default=0"
 
     cryptdevice_params = []
 
diff --git a/src/modules/initcpiocfg/main.py b/src/modules/initcpiocfg/main.py
index 0939054fb..b56a09bb6 100644
--- a/src/modules/initcpiocfg/main.py
+++ b/src/modules/initcpiocfg/main.py
@@ -36,6 +36,14 @@ def detect_plymouth():
     # Used to only check existence of path /usr/bin/plymouth in target
     return target_env_call(["sh", "-c", "which plymouth"]) == 0
 
+def detect_grub_btrfs_overlayfs():
+    """
+    Checks existence of the grub-btrfs overlayfs hook
+
+    @return True if the grub-btrfs overlayfs hook exists in the target, False otherwise
+    """
+    return target_env_call(["sh", "-c", "file /etc/initcpio/hooks/grub-btrfs-overlayfs"]) == 0
+
 
 class cpuinfo(object):
     """
@@ -239,6 +247,9 @@ def find_initcpio_features(partitions, root_mount_point):
     else:
         hooks.append("fsck")
 
+    if detect_grub_btrfs_overlayfs():
+        hooks.append("grub-btrfs-overlayfs")
+
     return hooks, modules, files, binaries
 
 
diff --git a/src/modules/mhwdcfg/main.py b/src/modules/mhwdcfg/main.py
new file mode 100644
index 000000000..1884e7bd3
--- /dev/null
+++ b/src/modules/mhwdcfg/main.py
@@ -0,0 +1,113 @@
+#!/usr/bin/env python3
+# -*- coding: utf-8 -*-
+#
+# === This file is part of Calamares - <http://github.com/calamares> ===
+#
+#   Copyright 2016, Artoo <artoo@manjaro.org>
+#   Copyright 2016-2019, Philip MÃ¼ller <philm@manjaro.org>
+#
+#   Calamares is free software: you can redistribute it and/or modify
+#   it under the terms of the GNU General Public License as published by
+#   the Free Software Foundation, either version 3 of the License, or
+#   (at your option) any later version.
+#
+#   Calamares is distributed in the hope that it will be useful,
+#   but WITHOUT ANY WARRANTY; without even the implied warranty of
+#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+#   GNU General Public License for more details.
+#
+#   You should have received a copy of the GNU General Public License
+#   along with Calamares. If not, see <http://www.gnu.org/licenses/>.
+
+import libcalamares
+
+from libcalamares.utils import target_env_call, debug
+from os.path import join
+from subprocess import call
+
+
+class MhwdController:
+    def __init__(self):
+        self.__root = libcalamares.globalstorage.value("rootMountPoint")
+        self.__bus = libcalamares.job.configuration.get('bus', [])
+        self.__identifier = libcalamares.job.configuration.get(
+            'identifier',
+            []
+            )
+        self.__local = libcalamares.job.configuration['local']
+        self.__repo = libcalamares.job.configuration['repo']
+        self._driver = libcalamares.job.configuration['driver']
+
+    @property
+    def driver(self):
+        return self._driver
+
+    @driver.setter
+    def driver(self, value):
+        self._driver = value
+
+    @property
+    def root(self):
+        return self.__root
+
+    @property
+    def local(self):
+        return self.__local
+
+    @property
+    def repo(self):
+        return self.__repo
+
+    @property
+    def identifier(self):
+        return self.__identifier
+
+    @property
+    def bus(self):
+        return self.__bus
+
+    def umount(self, mp):
+        call(["umount", "-l", join(self.root, mp)])
+
+    def mount(self, mp):
+        call(["mount", "-B", "/" + mp, join(self.root, mp)])
+
+    def rmdir(self, dir):
+        call(["rm", "-Rf", join(self.root, dir)])
+
+    def mkdir(self, dir):
+        call(["mkdir", "-p", join(self.root, dir)])
+
+    def configure(self, name, id):
+        cmd = ["mhwd", "-a", str(name), str(self.driver), str(id).zfill(4)]
+        if self.local:
+            self.mkdir("opt/mhwd")
+            self.mount("opt/mhwd")
+            self.mount("var/lib/mhwd/db")
+            cmd.extend(["--pmconfig", self.repo])
+
+        self.mount("etc/resolv.conf")
+        target_env_call(cmd)
+
+        if self.local:
+            self.umount("opt/mhwd")
+            self.rmdir("opt/mhwd")
+            self.umount("var/lib/mhwd/db")
+        self.umount("etc/resolv.conf")
+
+    def run(self):
+        for b in self.bus:
+            for id in self.identifier['net']:
+                    self.configure(b, id)
+            for id in self.identifier['video']:
+                    self.configure(b, id)
+
+        return None
+
+
+def run():
+    """ Configuring the hardware """
+
+    mhwd = MhwdController()
+
+    return mhwd.run()
diff --git a/src/modules/mhwdcfg/mhwdcfg.conf b/src/modules/mhwdcfg/mhwdcfg.conf
new file mode 100644
index 000000000..1233ab9bb
--- /dev/null
+++ b/src/modules/mhwdcfg/mhwdcfg.conf
@@ -0,0 +1,19 @@
+---
+bus:
+    - pci
+#    - usb
+
+identifier:
+    net:
+      - 200
+      - 280
+    video:
+      - 300
+      - 302
+      - 380
+
+driver: free
+
+local: true
+
+repo: /opt/mhwd/pacman-mhwd.conf
diff --git a/src/modules/mhwdcfg/module.desc b/src/modules/mhwdcfg/module.desc
new file mode 100644
index 000000000..1e719bb0b
--- /dev/null
+++ b/src/modules/mhwdcfg/module.desc
@@ -0,0 +1,6 @@
+# Syntax is YAML 1.2
+---
+type:       "job"
+name:       "mhwdcfg"
+interface:  "python"
+script:     "main.py"   #assumed relative to the current directory
diff --git a/src/modules/mount/mount.conf b/src/modules/mount/mount.conf
index da9539569..ec089bff5 100644
--- a/src/modules/mount/mount.conf
+++ b/src/modules/mount/mount.conf
@@ -55,71 +55,23 @@ btrfsSubvolumes:
       # subvolume: ""
     - mountPoint: /home
       subvolume: /@home
+    - mountPoint: /root
+      subvolume: /@root
+    - mountPoint: /srv
+      subvolume: /@srv
     - mountPoint: /var/cache
       subvolume: /@cache
     - mountPoint: /var/log
       subvolume: /@log
+    - mountPoint: /var/tmp
+      subvolume: /@tmp
 
-# The name of the btrfs subvolume holding the swapfile.  This only used when
-# a swapfile is selected and the root filesystem is btrfs
-#
-btrfsSwapSubvol: /@swap
-
-# The mount options used to mount each filesystem.
-#
-# filesystem contains the name of the filesystem or on of three special
-# values, "default", efi" and "btrfs_swap".  The logic is applied in this manner:
-#   - If the partition is the EFI partition, the "efi" entry will be used
-#   - If the fs is btrfs and the subvolume is for the swapfile,
-#     the "btrfs_swap" entry is used
-#   - If the  filesystem is an exact match for filesystem, that entry is used
-#   - If no match is found in the above, the default entry is used
-#   - If there is no match and no default entry, "defaults" is used
-#   - If the mountOptions key is not present, "defaults" is used
-#
-# Each filesystem entry contains 3 keys, all of which are optional
-#   options - An array of mount options that is used on all disk types
-#   ssdOptions - An array of mount options combined with options for ssds
-#   hddOptions - An array of mount options combined with options for hdds
-# If combining these options results in an empty array, "defaults" is used
-#
-# Example 1
-# In this example, there are specific options for ext4 and btrfs filesystems,
-# the EFI partition and the subvolume holding the btrfs swapfile.  All other
-# filesystems use the default entry.  For the btrfs filesystem, there are
-# additional options specific to hdds and ssds
-#
-# mountOptions:
-#    - filesystem: default
-#      options: [ defaults ]
-#    - filesystem: efi
-#      options: [ defaults, umask=0077 ]
-#    - filesystem: ext4
-#      options: [ defaults ]
-#    - filesystem: btrfs
-#      options: [ defaults, compress=zstd:1 ]
-#      ssdOptions: [ discard=async ]
-#      hddOptions: [ autodefrag ]
-#    - filesystem: btrfs_swap
-#      options: [ defaults, noatime ]
-#
-# Example 2
-# In this example there is a single default used by all filesystems
-#
-# mountOptions:
-#    - filesystem: default
-#      options: [ defaults ]
-#
 mountOptions:
     - filesystem: default
       options: [ defaults ]
     - filesystem: efi
       options: [ defaults, umask=0077 ]
     - filesystem: btrfs
-      options: [ defaults, compress=zstd:1 ]
+      options: [ defaults, noatime, compress=zstd ]
     - filesystem: btrfs_swap
-      options: [ defaults, noatime ]
-
-
-
-
+      options: [ defaults, noatime ]
\ No newline at end of file
diff --git a/src/modules/partition/gui/PartitionLabelsView.cpp b/src/modules/partition/gui/PartitionLabelsView.cpp
index e338da252..30c7eb152 100644
--- a/src/modules/partition/gui/PartitionLabelsView.cpp
+++ b/src/modules/partition/gui/PartitionLabelsView.cpp
@@ -360,7 +360,7 @@ PartitionLabelsView::drawLabel( QPainter* painter,
                                 const QPoint& pos,
                                 bool selected )
 {
-    painter->setPen( Qt::black );
+    painter->setPen( Qt::white );
     int vertOffset = 0;
     int width = 0;
     for ( const QString& textLine : text )
diff --git a/src/modules/partition/partition.conf b/src/modules/partition/partition.conf
index ca94ef387..0d5a4704a 100644
--- a/src/modules/partition/partition.conf
+++ b/src/modules/partition/partition.conf
@@ -34,7 +34,7 @@
 efi:
     mountPoint:         "/boot/efi"
     recommendedSize:    300MiB
-    minimumSize:        32MiB
+    minimumSize:        260MiB
     label:              "EFI"
 
 # Deprecated alias of efi.mountPoint
@@ -73,10 +73,10 @@ efi:
 # actually created.
 userSwapChoices:
     - none      # Create no swap, use no swap
-    - small     # Up to 4GB
+    #- small     # Up to 4GB
     - suspend   # At least main memory size
     # - reuse     # Re-use existing swap, but don't create any (unsupported right now)
-    - file      # To swap file instead of partition
+    #- file      # To swap file instead of partition
 
 # This optional setting specifies the name of the swap partition (see
 # PARTLABEL; gpt only; requires KPMCore >= 4.2.0).
@@ -205,7 +205,7 @@ initialSwapChoice: none
 # If nothing is specified, Calamares defaults to "ext4".
 #
 # Names are case-sensitive and defined by KPMCore.
-defaultFileSystemType:  "ext4"
+defaultFileSystemType:  "btrfs"
 
 # Selectable filesystem type, used when "erase" is done.
 #
diff --git a/src/modules/postcfg/main.py b/src/modules/postcfg/main.py
new file mode 100644
index 000000000..6a8d52307
--- /dev/null
+++ b/src/modules/postcfg/main.py
@@ -0,0 +1,149 @@
+#!/usr/bin/env python3
+# -*- coding: utf-8 -*-
+#
+# === This file is part of Calamares - <http://github.com/calamares> ===
+#
+#   Copyright 2014 - 2019, Philip MÃ¼ller <philm@manjaro.org>
+#   Copyright 2016, Artoo <artoo@manjaro.org>
+#
+#   Calamares is free software: you can redistribute it and/or modify
+#   it under the terms of the GNU General Public License as published by
+#   the Free Software Foundation, either version 3 of the License, or
+#   (at your option) any later version.
+#
+#   Calamares is distributed in the hope that it will be useful,
+#   but WITHOUT ANY WARRANTY; without even the implied warranty of
+#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+#   GNU General Public License for more details.
+#
+#   You should have received a copy of the GNU General Public License
+#   along with Calamares. If not, see <http://www.gnu.org/licenses/>.
+
+import libcalamares
+import subprocess
+
+from shutil import copy2
+from distutils.dir_util import copy_tree
+from os.path import join, exists
+from libcalamares.utils import target_env_call
+
+
+class ConfigController:
+    def __init__(self):
+        self.__root = libcalamares.globalstorage.value("rootMountPoint")
+        self.__keyrings = libcalamares.job.configuration.get('keyrings', [])
+
+    @property
+    def root(self):
+        return self.__root
+
+    @property
+    def keyrings(self):
+        return self.__keyrings
+
+    def init_keyring(self):
+        target_env_call(["pacman-key", "--init"])
+
+    def populate_keyring(self):
+        target_env_call(["pacman-key", "--populate"])
+
+    def terminate(self, proc):
+        target_env_call(['killall', '-9', proc])
+
+    def copy_file(self, file):
+        if exists("/" + file):
+            copy2("/" + file, join(self.root, file))
+
+    def copy_folder(self, source, target):
+        if exists("/" + source):
+            copy_tree("/" + source, join(self.root, target))
+
+    def remove_pkg(self, pkg, path):
+        if exists(join(self.root, path)):
+            target_env_call(['pacman', '-R', '--noconfirm', pkg])
+
+    def umount(self, mp):
+        subprocess.call(["umount", "-l", join(self.root, mp)])
+
+    def mount(self, mp):
+        subprocess.call(["mount", "-B", "/" + mp, join(self.root, mp)])
+
+    def rmdir(self, dir):
+        subprocess.call(["rm", "-Rf", join(self.root, dir)])
+
+    def mkdir(self, dir):
+        subprocess.call(["mkdir", "-p", join(self.root, dir)])
+
+    def run(self):
+        self.init_keyring()
+        self.populate_keyring()
+
+        # Generate mirror list
+        if exists(join(self.root, "usr/bin/reflector")):
+            if libcalamares.globalstorage.value("hasInternet"):
+                target_env_call(["reflector", "--sort", "age", "--protocol", "https", "--save", "/etc/pacman.d/mirrorlist"])
+        else:
+            self.copy_file('etc/pacman.d/mirrorlist')
+
+        # Initialize package manager databases
+        if libcalamares.globalstorage.value("hasInternet"):
+            target_env_call(["pacman", "-Syy"])
+
+        # Remove unneeded ucode
+        cpu_ucode = subprocess.getoutput("hwinfo --cpu | grep Vendor: -m1 | cut -d\'\"\' -f2")
+        if cpu_ucode == "AuthenticAMD":
+            self.remove_pkg("intel-ucode", "boot/intel-ucode.img")
+        elif cpu_ucode == "GenuineIntel":
+            self.remove_pkg("amd-ucode", "boot/amd-ucode.img")
+
+        # Remove calamares
+        self.remove_pkg("calamares", "usr/bin/calamares")
+        self.remove_pkg("calamares-git", "usr/bin/calamares")
+
+        # Copy skel to root
+        self.copy_folder('etc/skel', 'root')
+
+        # Workaround for pacman-key bug
+        # FS#45351 https://bugs.archlinux.org/task/45351
+        # We have to kill gpg-agent because if it stays
+        # around we can't reliably unmount
+        # the target partition.
+        self.terminate('gpg-agent')
+
+        # Update grub.cfg
+        if exists(join(self.root, "usr/bin/update-grub")):
+            target_env_call(["update-grub"])
+
+        # Enable 'menu_auto_hide' when supported in grubenv
+        if exists(join(self.root, "usr/bin/grub-set-bootflag")):
+            target_env_call(["grub-editenv", "-", "set", "menu_auto_hide=1", "boot_success=1"])
+
+        # create snapper config
+        if exists(join(self.root, "usr/bin/snapper")):
+            target_env_call(["snapper", "-c", "root" "create-config", "/"])
+            target_env_call(["btrfs", "subvolume", "create", "/.snapshots"])
+
+        # Install Office Suite if selected (WIP)
+        office_package = libcalamares.globalstorage.value("packagechooser_packagechooser")
+        if not office_package:
+            libcalamares.utils.warning("no office suite selected, {!s}".format(office_package))
+        else:
+            # For PoC we added the Office Packages to mhwd-live overlay in 18.1.0
+            cmd1 = ["pacman", "-S", office_package, "--noconfirm", "--config", "/opt/mhwd/pacman-mhwd.conf" ]
+            self.mkdir("opt/mhwd")
+            self.mount("opt/mhwd")
+            self.mount("etc/resolv.conf")
+            target_env_call(cmd1)
+            self.umount("opt/mhwd")
+            self.rmdir("opt/mhwd")
+            self.umount("etc/resolv.conf")
+
+        return None
+
+
+def run():
+    """ Misc postinstall configurations """
+
+    config = ConfigController()
+
+    return config.run()
diff --git a/src/modules/postcfg/module.desc b/src/modules/postcfg/module.desc
new file mode 100644
index 000000000..77e9ca4dd
--- /dev/null
+++ b/src/modules/postcfg/module.desc
@@ -0,0 +1,6 @@
+# Syntax is YAML 1.2
+---
+type:       "job"
+name:       "postcfg"
+interface:  "python"
+script:     "main.py"   #assumed relative to the current directory
diff --git a/src/modules/postcfg/postcfg.conf b/src/modules/postcfg/postcfg.conf
new file mode 100644
index 000000000..7ad198f95
--- /dev/null
+++ b/src/modules/postcfg/postcfg.conf
@@ -0,0 +1,4 @@
+---
+keyrings:
+    - archlinux
+    - chaotic
-- 
2.43.0

