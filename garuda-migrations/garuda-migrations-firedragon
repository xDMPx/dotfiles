#!/usr/bin/env bash

set -euo pipefail

declare -A HOME_FOLDERS=()

# shellcheck disable=2034
while IFS=: read -r name password uid gid gecos home shell; do
    if [ ! -f "$home/.firedragon/profiles.ini" ]; then
        continue
    fi

    if ! current_profile="$(gawk '
    BEGIN {
        IN_BLOCK=0
        PATH=""
        HAS_DEFAULT=0
    }
    /^\[.*\]$/ {
        IN_BLOCK=1
        HAS_DEFAULT=0
        PATH=""
    }
    /^Path=/ {
        if (IN_BLOCK) {
            if (match($0, /^Path=(.*)$/, a)) {
                PATH=a[1]
            }
        }
    }
    /^Default=1$/ {
        if (IN_BLOCK) {
            HAS_DEFAULT=1
        }
    }
    {
        if (IN_BLOCK && HAS_DEFAULT && PATH != "") {
            print PATH
            exit
        }
    }
    ' "$home/.firedragon/profiles.ini")" || [ -z "$current_profile" ]; then
        echo "Failed to parse profiles.ini for $name"
        continue
    fi

    # We need to stop psd as it will interfere by symlinking the profile folder, resetting
    # its creation date. This makes our script think the profile has already been migrated.
    echo "Ensuring profile-sync-daemon for $name is stopped"
    systemctl --user -M "$name@.host" stop psd || true

    # Check whether the profile has been migrated already
    if [ "$(stat -c %W "$home/.firedragon/$current_profile")" -gt "1707050168" ]; then
        echo "Browser profile creation time indicates we already migrated the profile for $name, skipping."
        continue
    fi

    HOME_FOLDERS["$home"]="$current_profile"
done < <(getent passwd)

if [ "${#HOME_FOLDERS[@]}" -eq 0 ]; then
    echo "No unmigrated FireDragon profiles found, exiting gracefully."
    exit 1
fi

for home_folder in "${!HOME_FOLDERS[@]}"; do
    echo "Migrating FireDragon profile for $home_folder"

    pushd "$home_folder/.firedragon" &>/dev/null

    # Create a backup of the current profile
    mv "$current_profile" "$current_profile-pre-floorp-backup"
    mkdir "$current_profile"

    # Move all important data between profiles
    to_move=(places.sqlite
        favicons.sqlite
        key4.db
        permissions.sqlite
        search.json.mozlz4
        formhistory.sqlite
        cookies.sqlite
        cert9.db
        signons.sqlite
        content-prefs.sqlite
        handlers.json)

    for file in "${to_move[@]}"; do
        if [ -f "$current_profile-pre-floorp-backup/$file" ]; then
            cp "$current_profile-pre-floorp-backup/$file" "$current_profile"
        fi
    done

    # Adjust permissions to match the previous profile
    chown -R --reference "$current_profile-pre-floorp-backup/" "$current_profile"

    popd &>/dev/null
done
